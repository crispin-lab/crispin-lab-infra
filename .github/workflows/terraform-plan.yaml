name: "📝TF Plan"

on:
  pull_request:
    branches:
      - main
      - ci/test**
  workflow_dispatch:
    inputs:
      run:
        default: all
        description: It would trigger entire target's planning

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      terraform_targets: ${{ steps.tf-targets.outputs.terraform_targets }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔎 Terraform targets"
        id: tf-targets
        run: |
          GITHUB_FILES_CHANGED=$(git diff --cached --name-only | grep "^.github/" || echo)
          if [ ! -z "$GITHUB_FILES_CHANGED" ]; then
            echo "GitHub workflow files changed - processing all directories"
            PROCESS_ALL=true
          elif [ $GITHUB_EVENT_NAME = "workflow_dispatch" ]; then
            echo "Running in dispatch mode - processing all directories"
            PROCESS_ALL=true
          else
            echo "Running in push mode - processing only changed directories"
            PROCESS_ALL=false
          fi
          
          if [ "$PROCESS_ALL" = "true" ]; then
            DIRS=$(find terraform -type d -mindepth 4 -maxdepth 4)
            MODE_MESSAGE="Running apply on all terraform directories"
            TITLE="🌕 Full Terraform Plan"
          else
            DIRS=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | \
              xargs -I {} dirname {} | \
              grep "^terraform/" | \
              awk -F/ '{if(NF>=5) print $1"/"$2"/"$3"/"$4"/"$5}' | \
              sort -u)
            MODE_MESSAGE="Running apply on changed directories only"
            TITLE="🌗 Changed Terraform Directories"
          fi          
          
          echo "Target directories:"
          echo "$DIRS"
          
          echo "[]" > targets.json
          
          while read -r dir; do
            if [[ $dir =~ ^terraform/([^/]+)/([^/]+)/([^/]+)/([^/]+)$ ]]; then
              provider="${BASH_REMATCH[1]}"
              account_name="${BASH_REMATCH[2]}"
              env="${BASH_REMATCH[3]}"
              region="${BASH_REMATCH[4]}"
          
              target="$provider/$account_name/$env/$region"
              json_str="{\"target\":\"$target\",\"target_path\":\"$dir\",\"provider\":\"$provider\",\"account_name\":\"$account_name\",\"env\":\"$env\",\"region\":\"$region\"}"
          
              if [ "$(cat targets.json)" = "[]" ]; then
                echo "[$json_str]" > targets.json
              else
                jq ". + [$json_str]" targets.json > targets.tmp && mv targets.tmp targets.json
              fi
            fi
          done <<< "$DIRS"
          
          if [ ! -s targets.json ] || [ "$(cat targets.json)" = "[]" ]; then
            echo "terraform_targets=[]" >> $GITHUB_OUTPUT
          else
            echo "terraform_targets=$(jq -c . targets.json)" >> $GITHUB_OUTPUT
          fi
          
          {
            echo "# $TITLE"
            echo
            echo "$MODE_MESSAGE"
            if [ "$PROCESS_ALL" = "true" ] && [ "${{ github.event_name }}" != "schedule" ]; then
              echo "**.github/** files changed - running full plan**"
            fi
            echo
            if [ "$(cat targets.json)" = "[]" ]; then
              echo "ℹ️ No terraform directories to process"
            else
              echo "| Provider | Target | TargetPath | Environment | Region |"
              echo "|----------|---------|---------|------------|-------------|"
              jq -r '.[] | "| \(.provider) | \(.target) | \(.target_path) | \(.env) | \(.region) |"' targets.json
            fi
          } >> $GITHUB_STEP_SUMMARY

  terraform-plan:
    name: "🥽 (${{ matrix.target}})"
    runs-on: ubuntu-latest
    needs: init
    if: ${{ toJSON(fromJSON(needs.init.outputs.terraform_targets)) != '[]' }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.init.outputs.terraform_targets) }}
      fail-fast: false
    defaults:
      run:
        working-directory: '${{ matrix.target_path }}'
    env:
      TARGET: ${{ matrix.target }}
      TARGET_PATH: ${{ matrix.target_path }}
    steps:
      - uses: actions/checkout@v4
      - uses: int128/hide-comment-action@v1
        name: Hide Existing Comments
        env:
          TARGET: '${{ matrix.target }}'
        with:
          authors: "github-actions[bot]"
          starts-with: |
            <!-- Target Directory: ${{ matrix.target }} -->
      - uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: "ap-northeast-2"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.provider }}-${{ matrix.env }}-${{ matrix.region }}
          path: ${{ matrix.target_path }}/tfplan
          retention-days: 5

      - name: Store Plan Output
        run: terraform show -no-color tfplan > plan_output.txt

      - name: Upload Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: plan-output-${{ matrix.provider }}-${{ matrix.env }}-${{ matrix.region }}
          path: ${{ matrix.target_path }}/plan_output.txt

      - name: Create PR Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const targetPath = '${{ matrix.target_path }}';
            const actor = '${{ github.actor }}';
            const eventName = '${{ github.event_name }}';
            
            let commentBody = `### Terraform Plan 결과 요약\n\n`;
            
            const filePath = `${targetPath}/plan_output.txt`
            
            let foundFile = false;
            let planOutput = '';
            
            if (fs.existsSync(filePath)) {
              foundFile = true;
              planOutput = fs.readFileSync(filePath, 'utf8');
            }
            
            if (foundFile) {
              const summary = planOutput.includes('No changes')
                ? '✅ 변경 사항 없음'
                : planOutput.includes('Error:')
                  ? '❌ 오류 발생'
                  : planOutput.includes('Changes to Outputs:') || planOutput.includes('Plan:')
                    ? '🔄 변경 사항 있음'
                    : '🔄 변경 사항 있음';

              commentBody += `**${targetPath}**: ${summary}\n\n`;
              commentBody += `<details><summary>세부 플랜 보기</summary>\n\n\`\`\`terraform\n${planOutput}\n\`\`\`\n\n</details>\n\n`;
            } else {
              commentBody += `**${targetPath}**: ❓ 플랜 결과 없음 (파일을 찾을 수 없음)\n\n`;
            } 

            commentBody += `*Pushed by: @${actor}, Action: \`${eventName}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  check-results:
    needs:
      - init
      - terraform-plan
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Jobs Status
        id: check
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "Some terraform plans failed"
            exit 1
          else
            echo "All terraform plans succeeded"
          fi
